[{"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\index.tsx":"1","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\stores\\store.ts":"3","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\layout\\App.tsx":"4","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\stores\\commonStore.ts":"5","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\stores\\modalStore.ts":"6","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\stores\\userStore.ts":"7","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\stores\\activityStore.ts":"8","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\layout\\navbar.tsx":"9","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"10","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\errors\\NotFound.tsx":"11","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\home\\HomePage.tsx":"12","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\errors\\TestErrors.tsx":"13","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\errors\\ServerError.tsx":"14","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\users\\LoginForm.tsx":"15","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"16","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"17","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\common\\modals\\ModalContainer.tsx":"18","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"19","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\api\\agent.ts":"20","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\models\\profile.ts":"21","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\common\\options\\categoryOptions.ts":"22","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\errors\\ValidationErrors.tsx":"23","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\users\\RegisterForm.tsx":"24","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"25","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\dashboard\\ActivityFilters.tsx":"26","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\form\\MyTextArea.tsx":"27","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\form\\MySelectInput.tsx":"28","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\form\\MyDateInput.tsx":"29","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx":"30","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx":"31","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx":"32","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\common\\form\\MyTextInput.tsx":"33","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\details\\ActivityDetaledHeader.tsx":"34","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx":"35","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\dashboard\\ActivityListItemAttendee.tsx":"36","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\models\\activity.ts":"37"},{"size":1008,"mtime":1664377688041,"results":"38","hashOfConfig":"39"},{"size":440,"mtime":1660506099966,"results":"40","hashOfConfig":"39"},{"size":706,"mtime":1664377687897,"results":"41","hashOfConfig":"39"},{"size":2223,"mtime":1664377687857,"results":"42","hashOfConfig":"39"},{"size":871,"mtime":1664377687890,"results":"43","hashOfConfig":"39"},{"size":511,"mtime":1664377687892,"results":"44","hashOfConfig":"39"},{"size":1614,"mtime":1664377687958,"results":"45","hashOfConfig":"39"},{"size":5957,"mtime":1664490180891,"results":"46","hashOfConfig":"39"},{"size":1619,"mtime":1664377687858,"results":"47","hashOfConfig":"39"},{"size":371,"mtime":1660506099918,"results":"48","hashOfConfig":"39"},{"size":541,"mtime":1660506099945,"results":"49","hashOfConfig":"39"},{"size":1544,"mtime":1664377688025,"results":"50","hashOfConfig":"39"},{"size":2024,"mtime":1660506099946,"results":"51","hashOfConfig":"39"},{"size":762,"mtime":1660506099945,"results":"52","hashOfConfig":"39"},{"size":1428,"mtime":1664377688036,"results":"53","hashOfConfig":"39"},{"size":940,"mtime":1664377687966,"results":"54","hashOfConfig":"39"},{"size":3992,"mtime":1664490205557,"results":"55","hashOfConfig":"39"},{"size":524,"mtime":1664377687848,"results":"56","hashOfConfig":"39"},{"size":1347,"mtime":1664479599722,"results":"57","hashOfConfig":"39"},{"size":3084,"mtime":1664489702998,"results":"58","hashOfConfig":"39"},{"size":342,"mtime":1664488695363,"results":"59","hashOfConfig":"39"},{"size":266,"mtime":1664377687855,"results":"60","hashOfConfig":"39"},{"size":433,"mtime":1664377688023,"results":"61","hashOfConfig":"39"},{"size":2037,"mtime":1664377688037,"results":"62","hashOfConfig":"39"},{"size":817,"mtime":1660506099936,"results":"63","hashOfConfig":"39"},{"size":580,"mtime":1660506099935,"results":"64","hashOfConfig":"39"},{"size":652,"mtime":1664377688021,"results":"65","hashOfConfig":"39"},{"size":945,"mtime":1664377688009,"results":"66","hashOfConfig":"39"},{"size":766,"mtime":1664377688002,"results":"67","hashOfConfig":"39"},{"size":2413,"mtime":1660506099938,"results":"68","hashOfConfig":"39"},{"size":1686,"mtime":1664479541922,"results":"69","hashOfConfig":"39"},{"size":1728,"mtime":1664377687989,"results":"70","hashOfConfig":"39"},{"size":651,"mtime":1660506099907,"results":"71","hashOfConfig":"39"},{"size":2234,"mtime":1664488695367,"results":"72","hashOfConfig":"39"},{"size":2320,"mtime":1664484774589,"results":"73","hashOfConfig":"39"},{"size":709,"mtime":1664475131596,"results":"74","hashOfConfig":"39"},{"size":1032,"mtime":1664489814072,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jxveem",{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\index.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\stores\\store.ts",["156"],"import { createContext, useContext } from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore:CommonStore;\r\n    userStore:UserStore;\r\n    modalStore: ModalStore;\r\n}\r\n\r\nexport const store: Store = {\r\n   activityStore: new ActivityStore(),\r\n   commonStore: new CommonStore(),\r\n   userStore:new UserStore(),\r\n   modalStore: new ModalStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\layout\\App.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\stores\\commonStore.ts",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\stores\\modalStore.ts",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\stores\\userStore.ts",["157"],"import { error } from \"console\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/User\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null=null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn(){\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds:UserFormValues) => {\r\n        try{\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user=user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        }catch (error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push ('/');\r\n\r\n    }\r\n    getUser = async () =>{\r\n        try{\r\n            const user= await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register  = async (creds: UserFormValues) => {\r\n        try{\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user=user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        }catch (error){\r\n            throw error;\r\n        }\r\n\r\n    }\r\n}","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\stores\\activityStore.ts",["158"],"import { format } from \"date-fns\";\r\nimport { tr } from \"date-fns/locale\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default  class ActivityStore{\r\n   activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n\r\n   constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n        a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities(){\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities , activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity]\r\n                return activities;\r\n            },{} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n     loadActivities = async () => {\r\n         this.loadingInitial = true;\r\n         try{\r\n             const activities = await agent.Activities.list();\r\n                activities.forEach(activity => {\r\n                  this.setActivity(activity);\r\n                })\r\n         this.setLoadingInitial(false);\r\n        }catch (error) {\r\n             console.log(error);\r\n             this.setLoadingInitial(false);\r\n            }\r\n         }\r\n         \r\n         loadActivity =async (id: string) => {\r\n             let activity = this.getActivity(id);\r\n            if(activity){\r\n                this.selectedActivity = activity;\r\n                return activity;\r\n            }else{\r\n                this.loadingInitial = true;\r\n            try{\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            }catch(error){\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n         private getActivity = (id: string) => {\r\n             return this.activityRegistry.get(id);\r\n        }\r\n\r\n        setLoadingInitial =(state: boolean) => {\r\n            this.loadingInitial = state;\r\n        }\r\n\r\n\r\n        createActivity =async (activity:ActivityFormValues) => {\r\n            const user = store.userStore.user;\r\n            const attendee = new Profile(user!);\r\n            try{\r\n               await agent.Activities.create(activity);\r\n               const newActivity = new Activity(activity);\r\n               newActivity.hostUsername = user!.username;\r\n               newActivity.attendees = [attendee];\r\n               this.setActivity(newActivity);\r\n               runInAction(() => {\r\n                   this.selectedActivity = newActivity;\r\n               })\r\n            }catch(error){\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        updateActivity =async (activity: ActivityFormValues) => {\r\n          try{\r\n              await agent.Activities.update(activity);\r\n              runInAction(() =>{\r\n                if(activity.id){\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                } \r\n              })\r\n\r\n        }catch (error){\r\n              console.log(error);\r\n          }\r\n       }\r\n\r\n    deleteActivity =async (id: string) => {\r\n           this.loading = true;\r\n           try{\r\n               await agent.Activities.delete(id);\r\n               runInAction(() => {\r\n            this.activityRegistry.delete(id);\r\n            this.loading = false;\r\n               })\r\n           }catch (error){\r\n               console.log(error);\r\n               runInAction(() => {\r\n                   this.loading = false;\r\n               })\r\n           }\r\n        }\r\n\r\n        updateAttendance = async () => {\r\n            const user = store.userStore.user;\r\n            this.loading = true;\r\n\r\n            try{\r\n                await agent.Activities.attend(this.selectedActivity!.id);\r\n                runInAction(() => {\r\n                    if (this.selectedActivity?.isGoing) {\r\n                        this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                        this.selectedActivity.isGoing = false;\r\n                    } else {\r\n                        const attendee = new Profile(user!);\r\n                        this.selectedActivity?.attendees?.push(attendee);\r\n                        this.selectedActivity!.isGoing = true;\r\n                    }\r\n                    this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n                })\r\n            } catch (error) {\r\n                console.log(error);\r\n            } finally {\r\n                runInAction(() => this.loading = false);\r\n            }\r\n        }\r\n    }\r\n\r\n","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\layout\\navbar.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\errors\\NotFound.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\home\\HomePage.tsx",["159"],"import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Header, Segment , Image, Button} from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer (function HomePage() {\r\n    const {userStore, modalStore} = useStore();\r\n    return (\r\n     <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\r\n         <Container text>\r\n             <Header as='h1' inverted>\r\n                 <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                 Reactivities\r\n             </Header>\r\n             {userStore.isLoggedIn ? (\r\n                <>\r\n                <Header as='h2' inverted content='Welcome to Reactivities'/>\r\n                <Button as={Link} to='/activities' size='huge' inverted>\r\n                 Go to Activities!\r\n                </Button>\r\n                </>\r\n                \r\n             ) : (\r\n                <>\r\n                  <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                 Login!\r\n         </Button>\r\n             <Button onClick={() => modalStore.openModal(<RegisterForm/>)} size='huge' inverted>\r\n                Register!\r\n         </Button>\r\n                </>\r\n             )}\r\n             \r\n         </Container>\r\n     </Segment>\r\n    )\r\n\r\n})","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\errors\\TestErrors.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\errors\\ServerError.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\users\\LoginForm.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",["160","161"],"import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"./MyTextArea\";\r\nimport MySelectInput from \"./MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"./MyDateInput\";\r\nimport { Activity, ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity,\r\n        loading, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n      if(!activity.id){\r\n          let newActivity = {\r\n              ...activity,\r\n              id: uuid()\r\n          };\r\n          createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n      } else{\r\n          updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n      }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal'/>\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid , isSubmitting, dirty }) => (\r\n                    <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea  rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                         placeholderText='Date' \r\n                         name='date' \r\n                         showTimeSelect\r\n                         timeCaption=\"time\"\r\n                         dateFormat='MMMM d, yyyy h:mm aa'\r\n                         />\r\n                        <Header content='Location Details' sub color='teal'/>\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                        disabled={isSubmitting || !dirty || !isValid}\r\n                        loading={isSubmitting} floated=\"right\" \r\n                        positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated=\"right\" type='submit' content='Cancle' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n})","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\common\\modals\\ModalContainer.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\api\\agent.ts",["162"],"import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { config } from 'process';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { User, UserFormValues } from '../models/User';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = 'http://localhost:5000/api';\r\n\r\naxios.interceptors.request.use(config =>{\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {  \r\n        await sleep(1000);\r\n        return response;\r\n}, (error:AxiosError) => {\r\n    const {data,status,config} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if(typeof data === 'string'){\r\n                toast.error(data);\r\n            }\r\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')){\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors){\r\n                const modalStateErrors =[];\r\n                for (const key in data.errors){\r\n                    if(data.errors[key]){\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorized');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n} )\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put:<T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del:<T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n  list: () => requests.get<Activity[]>('/activities' ),\r\n  details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n  create: (activity: ActivityFormValues) =>requests.post<void>('/activities',activity),\r\n  update: (activity: ActivityFormValues) =>requests.put<void>(`/activities/${activity.id}` , activity),\r\n  delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n  attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login:(user:UserFormValues) => requests.post<User>('/account/login',user),\r\n    register:(user:UserFormValues) => requests.post<User>('/account/register',user)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account\r\n\r\n}\r\nexport default agent;","C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\models\\profile.ts",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\common\\options\\categoryOptions.ts",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\errors\\ValidationErrors.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\users\\RegisterForm.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\dashboard\\ActivityFilters.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\form\\MyTextArea.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\form\\MySelectInput.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\form\\MyDateInput.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\common\\form\\MyTextInput.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\details\\ActivityDetaledHeader.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\features\\activities\\dashboard\\ActivityListItemAttendee.tsx",[],"C:\\Users\\pc\\Desktop\\React app\\Reacyt\\Reactivities2\\client-app\\src\\app\\models\\activity.ts",[],{"ruleId":"163","severity":1,"message":"164","line":2,"column":10,"nodeType":"165","messageId":"166","endLine":2,"endColumn":15},{"ruleId":"163","severity":1,"message":"167","line":1,"column":10,"nodeType":"165","messageId":"166","endLine":1,"endColumn":15},{"ruleId":"163","severity":1,"message":"168","line":2,"column":10,"nodeType":"165","messageId":"166","endLine":2,"endColumn":12},{"ruleId":"163","severity":1,"message":"169","line":4,"column":8,"nodeType":"165","messageId":"166","endLine":4,"endColumn":24},{"ruleId":"163","severity":1,"message":"170","line":15,"column":10,"nodeType":"165","messageId":"166","endLine":15,"endColumn":18},{"ruleId":"163","severity":1,"message":"171","line":21,"column":9,"nodeType":"165","messageId":"166","endLine":21,"endColumn":16},{"ruleId":"163","severity":1,"message":"172","line":2,"column":10,"nodeType":"165","messageId":"166","endLine":2,"endColumn":16},"@typescript-eslint/no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'error' is defined but never used.","'tr' is defined but never used.","'LoadingComponent' is defined but never used.","'Activity' is defined but never used.","'loading' is assigned a value but never used.","'config' is defined but never used."]