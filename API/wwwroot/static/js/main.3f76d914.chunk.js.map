{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/commentStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetaledHeader.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","JSON","parse","error","status","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","toast","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","a","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","clearSelectedActivity","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","CommentStore","comments","hubConnection","createHubConnection","actvivityId","activityStore","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","activityId","invoke","CommonStore","window","localStorage","getItem","appLoaded","setToken","setAppLoaded","setItem","removeItem","ModalStore","modal","open","openModal","content","closeModal","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","followingCount","loadFollowings","loadUserActivities","UserStore","creds","modalStore","logout","getUser","email","name","profileStore","commentStore","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","verticalAlign","relaxed","divided","ribbon","Extra","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.3f76d914.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n  id: string;\r\n  title: string;\r\n  date: Date | null;\r\n  description: string;\r\n  category: string;\r\n  city: string;\r\n  venue: string;\r\n  hostUsername: string;\r\n  isCancelled: boolean;\r\n  isGoing: boolean;\r\n  isHost: boolean;\r\n  host?: Profile;\r\n  attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity{\r\n  constructor(init?:ActivityFormValues){\r\n    Object.assign(this,init);\r\n  }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n  id?: string = undefined;\r\n  title: string = \"\";\r\n  category: string = \"\";\r\n  description: string = \"\";\r\n  date: Date | null = null;\r\n  city: string = \"\";\r\n  venue: string = \"\";\r\n\r\n  constructor(activity?: ActivityFormValues) {\r\n    if (activity) {\r\n      this.id = activity.id;\r\n      this.title = activity.title;\r\n      this.category = activity.category;\r\n      this.description = activity.description;\r\n      this.date = activity.date;\r\n      this.venue = activity.venue;\r\n      this.city = activity.city;\r\n    }\r\n  }\r\n}\r\n","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    } \r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                } \r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments:ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (actvivityId: string) =>{\r\n        if(store.activityStore.selectedActivity){\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + \"?activityId=\" + actvivityId,{\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log(\"Error establishing the connection: \", error));\r\n\r\n            this.hubConnection.on(\"LoadComments\", (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) =>{\r\n                runInAction(() => {\r\n                    comment.createdAt = new  Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments =[];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values:any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try{\r\n            await this.hubConnection?.invoke(\"SendComment\",values);\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n    \r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {   \r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            await agent.Account.register(creds);\r\n            history.push(`/account/registerSuccess?email=${creds.email}`);\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} exact to='/' header>\r\n                    <img src='/assets/logo.png' alt='logo' style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \r\n                                text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activites' \r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\" \r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\" \r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}    \r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date: Date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})//=> setPredicate('startDate', date as Date)}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image size='mini' \r\n                            circular src={attendee.image || '/assets/user.png'} \r\n                            bordered\r\n                            style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n\r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem.tsx';\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                        <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={handleGetNext}\r\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                            initialLoad={false}\r\n                        >\r\n                            <ActivityList />\r\n                        </InfiniteScroll>\r\n                    )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: 'Invalid email or password'}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivites' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivites' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                                Login!\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                                Register!\r\n                            </Button>\r\n                        </>\r\n\r\n                    )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions =[\r\n    {text: 'Drinks' , value:'drinks'},\r\n    {text: 'Culture' , value:'culture'},\r\n    {text: 'Film' , value:'film'},\r\n    {text: 'Food' , value:'food'},\r\n    {text: 'Music' , value:'music'},\r\n    {text: 'Travel' , value:'travel'},\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category'  name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date'  \r\n                            name='date' \r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City'  name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right' \r\n                            positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n})","import { Formik,Form, Field, FieldProps } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Segment, Header, Comment,Loader } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from \"date-fns\";\r\n\r\ninterface Props {\r\n  activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n  const { commentStore } = useStore();\r\n\r\n  useEffect(() => {\r\n    if (activityId) {\r\n      commentStore.createHubConnection(activityId);\r\n    }\r\n    return () => {\r\n      commentStore.clearComments();\r\n    };\r\n  }, [commentStore, activityId]);\r\n\r\n  return (\r\n    <>\r\n      <Segment\r\n        textAlign=\"center\"\r\n        attached=\"top\"\r\n        inverted\r\n        color=\"teal\"\r\n        style={{ border: \"none\" }}\r\n      >\r\n        <Header>Chat about this event</Header>\r\n      </Segment>\r\n      <Segment attached clearing>\r\n      <Formik \r\n                onSubmit={(values,{resetForm}) => \r\n                    commentStore.addComment(values).then(() => resetForm())}\r\n                initialValues={{body: ''}}\r\n                validationSchema={Yup.object({\r\n                  body: Yup.string().required()\r\n                })}\r\n            >\r\n               {({isSubmitting, isValid, handleSubmit}) => (\r\n                <Form className=\"ui form\">\r\n                  <Field name='body'>\r\n                    {(props:FieldProps)=>(\r\n                      <div style={{position:'relative'}}>\r\n                        <Loader active={isSubmitting}/>\r\n                        <textarea\r\n                          placeholder=\"Enter your comment (Enter to submit,SHIFT + enter for new line)\"\r\n                          rows={2}\r\n                          {...props.field}\r\n                          onKeyPress={e=>{\r\n                            if(e.key === 'Enter' && e.shiftKey){\r\n                              return;\r\n                            }\r\n                            if(e.key === 'Enter' && !e.shiftKey){\r\n                              e.preventDefault();\r\n                              isValid && handleSubmit();\r\n                            }\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </Field>\r\n              </Form>\r\n            )}\r\n            </Formik>\r\n        <Comment.Group>\r\n          {commentStore.comments.map((comment) => (\r\n            <Comment key={comment.id}>\r\n              <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\r\n              <Comment.Content>\r\n                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                    {comment.displayName}</Comment.Author>\r\n                <Comment.Metadata>\r\n                  <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                </Comment.Metadata>\r\n                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n              </Comment.Content>\r\n            </Comment>\r\n          ))}\r\n\r\n            \r\n        </Comment.Group>\r\n      </Segment>\r\n    </>\r\n  );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        loading={loading} onClick={updateAttendance} color='teal'>\r\n                            Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\nimport ActivityDetailedHeader from './ActivityDetaledHeader';\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n                \r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                    <Button \r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, {useState} from 'react';\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import React from 'react';\r\nimport {Tab, Grid, Header, Card} from \"semantic-ui-react\";\r\nimport ProfileCard from \"./ProfileCard\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3 ? `People following ${profile!.displayName}` : `People ${profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\r\n            <input {...getInputProps()} />  \r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>}\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n  profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n  const {profileStore: { isCurrentUser, uploadPhoto, \r\n        uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n  const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n  const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n      setTarget(e.currentTarget.name);\r\n      setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto (photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n      setTarget(e.currentTarget.name);\r\n      deletePhoto(photo);\r\n    }\r\n\r\n   return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n          {addPhotoMode ? (\r\n            <PhotoUploadWidget uploadPhoto = {handlePhotoUpload} loading={uploading} />\r\n          ) : (\r\n            <Card.Group itemsPerRow={5}>\r\n                {profile.photos?.map(photo => (\r\n                    <Card key={photo.id}>\r\n                        <Image src={photo.url} />\r\n                        {isCurrentUser &&(\r\n                          <Button.Group fluid widths={2}>\r\n                            <Button\r\n                              basic\r\n                              color='green'\r\n                              content='Main'\r\n                              name={'main' + photo.id}\r\n                              disabled={photo.isMain}\r\n                              loading={target === 'main' +  photo.id && loading}\r\n                              onClick={e => handleSetMainPhoto(photo, e)}\r\n                            />\r\n                            <Button basic \r\n                            color='red' \r\n                            icon='trash'\r\n                            loading={target === photo.id && loading}\r\n                            onClick={e => handleDeletePhoto(photo, e)}\r\n                            disabled={photo.isMain}\r\n                            name={photo.id}\r\n                            />\r\n                          </Button.Group>\r\n                        )}\r\n                </Card>\r\n              ))}\r\n            </Card.Group>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\r\n    ];\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route\r\n        path={'/(.+)'}\r\n        render={() => (\r\n          <>\r\n            <NavBar />\r\n            <Container style={{ marginTop: '7em' }}>\r\n              <Switch>\r\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                <PrivateRoute path='/errors' component={TestErrors} />\r\n                <Route path='/server-error' component={ServerError} />\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport {createBrowserHistory} from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <Router history={history}>\r\n      <ScrollToTop />\r\n      <App />\r\n    </Router>\r\n  </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}